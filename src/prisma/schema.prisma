datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    //   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider      = "prisma-client-js"
    // binaryTargets = ["native"]
    //   previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?                   @unique
    emailVerified DateTime?                 @map("email_verified")
    username      String?                   @unique
    conversations ConversationParticipant[] //массив диалогов с участием данного пользователя
    messages      Message[] //массив сообщений созданных пользователем
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

// модель коллекции для диалога
model Conversation {
    id              String                    @id @default(auto()) @map("_id") @db.ObjectId //идентификатор в БД
    participants    ConversationParticipant[] //массив участников данного диалога
    messages        Message[] //сообщения в данном диалоге
    // последнее сообщение в этом диалоге. ссылка на коллекцию Message. Связь Один-к-одному
    latestMessageId String?                   @unique //т.к. это поле учавствует в повторяющемся определении-типе ⬇️⬇️⬇️⬇️ Message ⬇️⬇️⬇️⬇️  нужно определить его как уникальное
    latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction) //name: "latestConversationMessage" - это алиас, он прописывается для избежания дублирования одинаковых полей
    createdAt       DateTime                  @default(now()) 
    updatedAt       DateTime                  @updatedAt 
}

// модель для связи участников диалога по принципу многие-ко-многим. будет являться промежуточным между коллекцией User и Conversation
model ConversationParticipant {
    id                   String       @id @default(auto()) @map("_id") @db.ObjectId
    userId               String
    user                 User         @relation(fields: [userId], references: [id]) //ссылочное поле для связи с коллекцией User через его id и полем userId этой коллекции
    conversationId       String       
    conversation         Conversation @relation(fields: [conversationId], references: [id]) //ссылочное поле для связи с коллекцией Conversation через его id и полем conversayionId этой коллекции
    //логическое поле определяющее - увидел-ли участник диалога последнее сообщение чата. По нему будет отображаться индикатор сигнализирующий о том что есть новое, непрочитанное, сообщение
    hasSeenLatestMessage Boolean //будет иметь по умолчанию значение false пока участник не нажмёт на "диалог", после чего оно инвертируется в true
    createdAt            DateTime     @default(now())
    updatedAt            DateTime     @updatedAt
}

// модель коллекции для сообщений. и свяжем эту коллекцию  по принципу много-к-одному с коллекциями: "общение/диалог"(Conversation) и "участник"(User)
model Message {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    // сообщение может принадлежать только одному диалогу
    conversationId String
    conversation   Conversation  @relation(fields: [conversationId], references: [id]) //ссылочное поле для связи с коллекцией Conversation через его id и полем conversationId этой коллекции
    // сообщение может принадлежать только одному участнику - отправителю сообщения
    senderId       String
    sender         User          @relation(fields: [senderId], references: [id])
    body           String
    isLatestIn     Conversation? @relation(name: "latestConversationMessage")
    createdAt      DateTime      @default(now()) //когда создано сообщение
    updatedAt      DateTime      @updatedAt //когда обновлено
}
